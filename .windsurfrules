
⸻

description:
globs:
alwaysApply: true

Your rule content

Purpose

Defines coding, design, and generation standards for Imagi Oasis to ensure consistency, efficiency, and best practices.

Company Overview
	•	Product: Imagi Oasis – AI-powered full-stack web application generator
	•	Mission: Enable users to rapidly build full-stack web apps using natural language
	•	Target Users: Entrepreneurs, creators, and developers requiring rapid application development
	•	Core Capability: Imagi allows users to build full-stack web apps with a Vue.js frontend and a Django backend

⸻

Environment Setup

OS & Shell
	•	OS: macOS
	•	Shell: zsh

Package Managers
	•	Frontend: npm/yarn
	•	Backend: pipenv

Required Tools
	•	Node.js: >= 16.x
	•	Python: >= 3.10
	•	PostgreSQL: >= 14

Editor Configuration
	•	IDE: Windsurf (project/workspace settings checked into repo)
	•	Extensions/Capabilities:
	•	Tailwind CSS IntelliSense (or Windsurf equivalent)
	•	Python support
	•	Vue tooling
	•	Editor ESLint/Prettier integration
	•	Local Servers (default):
	•	Frontend: npm run dev → http://localhost:5174
	•	Backend: python manage.py runserver → http://localhost:8000

⸻

Local Development
	•	Backend: Django with SQLite3, managed by Pipenv, run using Django’s development server
	•	Frontend: Vue.js with Vite development server

Staging & Production
	•	Backend:
	•	Framework: Django with PostgreSQL
	•	Served via Gunicorn (possible Uvicorn in async future)
	•	Frontend:
	•	Built with vite build
	•	Served as static files via Nginx
	•	Hosting:
	•	Provider: Railway.com
	•	Separate Docker images/services for frontend & backend
	•	Communication via Railway’s private network
	•	Future Enhancements:
	•	Container orchestration with Kubernetes

⸻

Backend Specifications
	•	Framework: Django 4.x
	•	API Framework: Django REST Framework (DRF)
	•	Database: SQLite (Dev), PostgreSQL (Prod)
	•	Testing: pytest
	•	Authentication: Django-AllAuth (future OAuth2)
	•	AI Integration: OpenAI, Anthropic
	•	Payments: Stripe
	•	Server: Gunicorn
	•	Containerization: Docker
	•	API Versioning: /api/v1/

Backend Apps (Django)
	•	auth: Authentication & authorization
	•	builder: Core AI generation logic & prompts
	•	home: Landing pages and static content
	•	payments: Stripe integration for credits
	•	agents: AI workflow management
	•	project_manager: Project lifecycle management

Django API Design
	•	Follow RESTful API principles
	•	Use DRF for endpoints
	•	Separation of views, serializers, and models
	•	Version all endpoints under /api/v1/

Backend Testing Strategy
	•	Unit Tests: pytest for models, views, APIs
	•	Integration Tests: endpoint verification

⸻

Frontend Specifications
	•	Framework: Vue.js 3.4+ with Composition API
	•	State Management: Pinia 2.1+
	•	HTTP Client: Axios 1.6+
	•	Styling: Tailwind CSS 3.4+
	•	UI Components: HeadlessUI, HeroIcons
	•	Form Validation: VeeValidate 4.15+
	•	Animations: GSAP 3.12+
	•	Markdown: Marked 15.0+
	•	Security: DOMPurify
	•	Build Tools: Vite 6.2+, TypeScript 5.3+
	•	Testing: Jest (Unit), Cypress (E2E)

Frontend Structure

Each app module must be self-contained:
	•	Components
	•	Routes
	•	Stores
	•	Services
	•	Types
	•	Tests

Code Architecture

Atomic Design (Vue.js)
	1.	Atoms: basic UI elements (buttons, inputs, icons, text)
	2.	Molecules: groups of atoms (form fields, cards)
	3.	Organisms: groups of molecules (forms, headers)
	4.	Templates: page-level components and layouts

Guidelines:
	•	Use Composition API for logic encapsulation
	•	Use TypeScript for type safety
	•	Alias @ → src for all imports

UI/UX Principles
	•	Minimalist, modern UI (Stripe, Airbnb, Apple, Twilio inspired)
	•	Fully responsive with Tailwind
	•	Accessibility compliance (WCAG 2.1)
	•	Dark/Light mode support

Frontend Testing Strategy
	•	Unit Tests: Jest for Vue components
	•	E2E Tests: Cypress for workflows

⸻

Deployment & API Architecture

Development
	•	Frontend: Vite dev server → http://localhost:5174
	•	Backend: Django dev server → http://localhost:8000
	•	Proxy: Vite proxies /api/* → Django backend

Production
	•	Frontend: Nginx serving static files
	•	Backend: Django + Gunicorn on Railway private network
	•	Proxy: Nginx proxies /api/* → backend

Centralized API Client
	•	Use relative URLs in dev & prod

⸻

Conventions & Naming
	•	Files/Folders: kebab-case for files, snake_case for Python, PascalCase for Vue components
	•	Tests: test_*.py (pytest), *.spec.ts (Jest), Cypress specs in e2e/
	•	Commits: Conventional Commits (feat:, fix:, chore:, etc.)
	•	Env Vars: Use .env files; never commit secrets

⸻

AI Assistant Instructions
	•	Prefix tasks clearly:
	•	task: for generation tasks
	•	study: for documentation/learning tasks
	•	Always generate self-contained files with imports & dependencies
	•	Include tests for all new features
	•	Adhere to established naming conventions

⸻

	•	You can @ files here
	•	You can use markdown but don’t have to