"""
Django settings for Imagi project.

Generated by 'django-admin startproject' using Django 5.1.2.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

from pathlib import Path
import os
from dotenv import load_dotenv
from datetime import timedelta
import tempfile
import stat

# Build paths inside the project like this: BASE_DIR / 'subdir'.
# Update BASE_DIR to point to the django directory
BASE_DIR = Path(__file__).resolve().parent.parent

# Load environment variables
load_dotenv()

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv('SECRET_KEY')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = False

# Application definition
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    'rest_framework.authtoken',
    'corsheaders',
    'debug_toolbar',
    # custom apps
    'apps.Auth',
    'apps.Products.Oasis.Builder',
    'apps.Home',
    'apps.Payments',
    'apps.Products.Oasis.Agents',
    'apps.Products.Oasis.ProjectManager',
    # Add django-allauth required apps
    'django.contrib.sites',
    'allauth',
    'allauth.account',
    'allauth.socialaccount',
]

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',  # Must be first to handle CORS properly
    'apps.Auth.middleware.CORSErrorMiddleware',  # Add our custom CORS error middleware
    'apps.Auth.middleware.APIRequestLoggingMiddleware',  # Add our API request logging middleware
    'debug_toolbar.middleware.DebugToolbarMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',  # Add this line for static files
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'apps.Auth.middleware.CacheControlMiddleware',
    'apps.Auth.middleware.LoginRequiredMiddleware',
    'allauth.account.middleware.AccountMiddleware',  # Add this line
]

ROOT_URLCONF = 'Imagi.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [
            BASE_DIR / 'templates',
            BASE_DIR / 'templates' / 'admin',
            BASE_DIR / 'apps' / 'Products' / 'Oasis' / 'Builder' / 'templates',
            BASE_DIR / 'apps' / 'Home' / 'templates',
            BASE_DIR / 'apps' / 'Auth' / 'templates',
            BASE_DIR / 'apps' / 'Payments' / 'templates',
            BASE_DIR / 'apps' / 'Products' / 'Oasis' / 'ProjectManager' / 'templates',
            BASE_DIR / 'apps' / 'Products' / 'Oasis' / 'Agents' / 'templates',
        ],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'Imagi.wsgi.application'

# Database
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}

# Password validation
AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
        'OPTIONS': {
            'min_length': 12,
        }
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
LANGUAGE_CODE = 'en-us'
TIME_ZONE = 'UTC'
USE_I18N = True
USE_TZ = True

# Static files (CSS, JavaScript, Images)
STATIC_URL = '/static/'

# Define STATIC_ROOT as an absolute path
STATIC_ROOT = BASE_DIR / 'staticfiles'

# Update STATICFILES_DIRS with absolute paths
STATICFILES_DIRS = [
    BASE_DIR / 'static',
]

# Create required directories
os.makedirs(str(STATIC_ROOT), exist_ok=True)
for static_dir in STATICFILES_DIRS:
    os.makedirs(str(static_dir), exist_ok=True)

# Use whitenoise for static file serving
STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'

# Default primary key field type
DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Authentication settings
LOGIN_REDIRECT_URL = '/'
LOGOUT_REDIRECT_URL = '/login/'
LOGIN_URL = '/login/'

# REST Framework settings
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework.authentication.TokenAuthentication',
        'rest_framework.authentication.SessionAuthentication',
    ],
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.IsAuthenticated',
    ],
    'UNAUTHENTICATED_USER': None,
    'DEFAULT_THROTTLE_CLASSES': [
        'rest_framework.throttling.AnonRateThrottle',
        'rest_framework.throttling.UserRateThrottle'
    ],
    'DEFAULT_THROTTLE_RATES': {
        'anon': '100/day',
        'user': '1000/day'
    },
    'DEFAULT_AUTHENTICATION': [],  # Allow unauthenticated access by default
    'DEFAULT_PARSER_CLASSES': [
        'rest_framework.parsers.JSONParser',
        'rest_framework.parsers.FormParser',
        'rest_framework.parsers.MultiPartParser'
    ],
    'DEFAULT_RENDERER_CLASSES': [
        'rest_framework.renderers.JSONRenderer',
        'rest_framework.renderers.BrowsableAPIRenderer',
    ],
    'DEFAULT_CONTENT_NEGOTIATION_CLASS': 'apps.Products.Oasis.Agents.api.negotiation.streaming.StreamingContentNegotiation',
    # Add acceptable MIME types for streaming
    'ACCEPTED_MEDIA_TYPES': [
        'application/json',
        'text/html',
        'text/event-stream',  # Add this for SSE streaming
        'multipart/form-data',
        'application/x-www-form-urlencoded',
    ],
}

# JWT settings
SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(minutes=60),
    'REFRESH_TOKEN_LIFETIME': timedelta(days=1),
    'ROTATE_REFRESH_TOKENS': True,
    'BLACKLIST_AFTER_ROTATION': True,
    'AUTH_HEADER_TYPES': ('Bearer',),
}

# CORS settings
CORS_ALLOWED_ORIGINS = [
    "http://localhost:5174",
    "http://127.0.0.1:5174",
    "http://localhost:8000",
    "http://127.0.0.1:8000",
]

# Set to False when using specific origins with credentials
CORS_ALLOW_ALL_ORIGINS = False
CORS_ALLOW_CREDENTIALS = True
CORS_ALLOW_METHODS = [
    'DELETE',
    'GET',
    'OPTIONS',
    'PATCH',
    'POST',
    'PUT',
]

CORS_ALLOW_HEADERS = [
    'accept',
    'accept-encoding',
    'authorization',
    'content-type',
    'dnt',
    'origin',
    'user-agent',
    'x-csrftoken',
    'x-requested-with',
    'x-api-client',
    'x-accept-override',
    'x-force-content-type',
]

# Add CORS_EXPOSE_HEADERS to allow clients to access these headers
CORS_EXPOSE_HEADERS = [
    'access-control-allow-origin',
    'access-control-allow-credentials',
    'cache-control',
    'connection',
]

# Add additional CORS configuration
CORS_PREFLIGHT_MAX_AGE = 86400  # 24 hours

# CSRF settings
CSRF_TRUSTED_ORIGINS = [
    'http://localhost:5174',
    'http://127.0.0.1:5174',
    'http://localhost:8000',
    'http://127.0.0.1:8000',
    'https://*.railway.app',
]

# Cookie settings
CSRF_COOKIE_NAME = 'csrftoken'
CSRF_COOKIE_HTTPONLY = False
CSRF_USE_SESSIONS = False
CSRF_COOKIE_SAMESITE = 'Lax'

SESSION_COOKIE_SECURE = True
SESSION_COOKIE_SAMESITE = 'Strict'
SESSION_COOKIE_HTTPONLY = True
SESSION_COOKIE_AGE = 1800  # 30 minutes
SESSION_EXPIRE_AT_BROWSER_CLOSE = True
SESSION_SAVE_EVERY_REQUEST = True

# Security settings
SECURE_SSL_REDIRECT = True
SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')
SECURE_BROWSER_XSS_FILTER = True
SECURE_CONTENT_TYPE_NOSNIFF = True
X_FRAME_OPTIONS = 'DENY'
SECURE_HSTS_SECONDS = 31536000  # 1 year
SECURE_HSTS_INCLUDE_SUBDOMAINS = True
SECURE_HSTS_PRELOAD = True

# Only allow specific hosts
ALLOWED_HOSTS = ['localhost', '127.0.0.1', '.railway.app']

# Development-specific settings
if DEBUG:
    # Override security settings for local development
    SECURE_SSL_REDIRECT = False
    CSRF_COOKIE_SECURE = False
    SESSION_COOKIE_SECURE = False
    
    # Make sure CORS is configured properly for development
    CORS_ALLOW_ALL_ORIGINS = False  # Keep this False to use the explicit list
    CORS_ALLOW_CREDENTIALS = True
    
    # Expose Access-Control-Allow-Origin header in the response
    CORS_EXPOSE_HEADERS = [
        'Access-Control-Allow-Origin',
        'Access-Control-Allow-Credentials',
        'Access-Control-Allow-Headers',
        'Access-Control-Allow-Methods',
        'Access-Control-Max-Age',
    ]
    
    SECURE_HSTS_SECONDS = 0
    SECURE_HSTS_INCLUDE_SUBDOMAINS = False
    SECURE_HSTS_PRELOAD = False
    
    # Allow all hosts in development
    ALLOWED_HOSTS = ['*']
    
    # Disable CSRF for development API endpoints
    CSRF_TRUSTED_ORIGINS = [
        'http://localhost:5174',
        'http://127.0.0.1:5174',
        'http://localhost:8000',
        'http://127.0.0.1:8000',
    ]
    
    INTERNAL_IPS = [
        '127.0.0.1',
        'localhost',
    ]

# Debug toolbar settings
INTERNAL_IPS = [
    '127.0.0.1',
]

# Stripe settings
STRIPE_SECRET_KEY = os.getenv('STRIPE_SECRET_KEY')
STRIPE_PUBLISHABLE_KEY = os.getenv('STRIPE_PUBLIC_KEY')

# Ensure these keys are not None
if not STRIPE_SECRET_KEY:
    raise ValueError("STRIPE_SECRET_KEY is not set in the environment variables.")
if not STRIPE_PUBLISHABLE_KEY:
    raise ValueError("STRIPE_PUBLIC_KEY is not set in the environment variables.")

# Validate Stripe key formats
if not STRIPE_SECRET_KEY.startswith(('sk_test_', 'sk_live_')):
    raise ValueError("STRIPE_SECRET_KEY appears to be in an invalid format")
if not STRIPE_PUBLISHABLE_KEY.startswith(('pk_test_', 'pk_live_')):
    raise ValueError("STRIPE_PUBLIC_KEY appears to be in an invalid format")


# Password Reset settings
PASSWORD_RESET_TIMEOUT = 259200  # 3 days in seconds

# Projects settings
PROJECTS_ROOT = BASE_DIR.parent / 'oasis_projects'
try:
    if not os.path.exists(PROJECTS_ROOT):
        os.makedirs(PROJECTS_ROOT, exist_ok=True)
        # Set appropriate permissions (rwx for owner only)
        os.chmod(PROJECTS_ROOT, stat.S_IRWXU)
        print(f"Created projects directory at {PROJECTS_ROOT}")
    elif not os.access(PROJECTS_ROOT, os.W_OK):
        print(f"WARNING: The project directory {PROJECTS_ROOT} exists but is not writable")
        # Try to make it writable
        try:
            current_mode = os.stat(PROJECTS_ROOT).st_mode
            os.chmod(PROJECTS_ROOT, current_mode | stat.S_IWUSR)
            print(f"Fixed permissions on {PROJECTS_ROOT}")
        except Exception as perm_err:
            print(f"ERROR: Could not fix permissions: {str(perm_err)}")
except Exception as dir_err:
    print(f"WARNING: Error setting up projects directory: {str(dir_err)}")
    # Fallback to a directory that should be writable
    PROJECTS_ROOT = os.path.join(tempfile.gettempdir(), 'imagi_projects')
    try:
        os.makedirs(PROJECTS_ROOT, exist_ok=True)
        print(f"Using fallback projects directory: {PROJECTS_ROOT}")
    except:
        print(f"CRITICAL: Could not create fallback directory")

# Token Settings
TOKEN_EXPIRED_AFTER_SECONDS = 86400  # 24 hours

# Cache Settings
CACHES = {
    'default': {
        'BACKEND': 'django.core.cache.backends.locmem.LocMemCache',
        'LOCATION': 'unique-snowflake'
    }
}

# Frontend configuration
FRONTEND_URL = os.getenv('FRONTEND_URL', 'http://localhost:5174')
FRONTEND_REDIRECT_ENABLED = os.getenv('FRONTEND_REDIRECT_ENABLED', 'true').lower() == 'true'

# Add site framework settings
SITE_ID = 1

# Add authentication backends
AUTHENTICATION_BACKENDS = [
    'allauth.account.auth_backends.AuthenticationBackend',
    'django.contrib.auth.backends.ModelBackend',
]

# Add new login methods setting
ACCOUNT_LOGIN_METHODS = {'username', 'email'}  # Use set literal for login methods

# Rest of allauth settings remain the same
ACCOUNT_EMAIL_REQUIRED = True
ACCOUNT_EMAIL_VERIFICATION = 'none'
ACCOUNT_USERNAME_REQUIRED = True
ACCOUNT_ADAPTER = 'apps.Auth.adapters.CustomAccountAdapter'
ACCOUNT_USER_MODEL_USERNAME_FIELD = 'username'
ACCOUNT_USER_MODEL_EMAIL_FIELD = 'email'
ACCOUNT_EMAIL_CONFIRMATION_HMAC = True

# API Keys for AI services
OPENAI_KEY = os.getenv('OPENAI_KEY')
ANTHROPIC_KEY = os.getenv('ANTHROPIC_KEY')

# Ensure API keys are set for production
if not DEBUG:
    if not OPENAI_KEY:
        raise ValueError("OPENAI_KEY is not set in the environment variables.")
    if not ANTHROPIC_KEY:
        raise ValueError("ANTHROPIC_KEY is not set in the environment variables.")

# Logging configuration to filter CORSErrorMiddleware logs
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'simple': {
            'format': '{asctime} {levelname} {message}',
            'style': '{',
        },
        'verbose': {
            'format': '{asctime} {levelname} {module} {message}',
            'style': '{',
        },
        'api_calls': {
            'format': '[API] {asctime} | {request.method} {request.path} → Status: {status_code}',
            'style': '{',
        },
    },
    'filters': {
        'require_debug_true': {
            '()': 'django.utils.log.RequireDebugTrue',
        },
    },
    'handlers': {
        'console': {
            'level': 'INFO',
            'class': 'logging.StreamHandler',
            'formatter': 'simple',
        },
        'api_console': {
            'level': 'INFO',
            'class': 'logging.StreamHandler',
            'formatter': 'api_calls',
        },
    },
    'loggers': {
        'django': {
            'handlers': ['console'],
            'level': 'WARNING',  # Only show warnings and errors
            'propagate': True,
        },
        'django.request': {
            'handlers': ['api_console'],
            'level': 'INFO',
            'propagate': False,
        },
        'apps.Auth.middleware': {
            'handlers': [],  # No handlers = no output
            'level': 'ERROR',  # Only show errors
            'propagate': False,
        },
    },
}
