# .cursorrules

# Purpose:
# This file defines coding and generation rules for the Imagi Oasis platform. 
# It ensures consistency, completeness, and adherence to best practices throughout the codebase.

# Core Directives:
# 1. Always generate complete, self-contained files when making updates. 
#    - Include all necessary imports, dependencies, and boilerplate code.
# 2. Write clean, maintainable, and secure code following Python 3 and Django best practices.
# 3. Use comments and clear naming conventions to enhance readability and maintainability.

# Project Structure:
# - The main project: Imagi (natural language to code platform).
# - User-specific projects: ~/startups/oasis_projects/<user_id>/<project_name>/
#   * Each user project is a standalone Django project.
#   * Templates (HTML) and static files (CSS, JS) are placed in the appropriate directories.
#   * Minimal Django views and URL configurations should be included.
# - The Imagi Oasis platform allows users to:
#   * Log in and manage multiple projects.
#   * Edit HTML/CSS and have changes reflected in their corresponding Django projects.
#   * Utilize AI agents on the backend to build and enhance web apps.

# Apps Overview:
# - Auth App: Handles user authentication (login/signup). Future integration with OAuth is planned.
# - Builder App: Core functionality; supports natural language to code generation and editing of pages 
#   (e.g., base.html, index.html). Offers Chat Mode and Build Mode for discussing and generating web pages.
# - Home App: Landing and static marketing content, linking to other features.
# - Payments App: Integrates Stripe for purchasing AI/API credits. Associates credits with user accounts.
# - ProjectManager App: Manages the lifecycle of user projects, including directory creation and file organization.

# Style & Design:
# - Draw inspiration from Stripe, Airbnb, Discord, Twilio, and Apple.
# - Emphasize minimalist, elegant, and responsive design principles.
# - Use external CSS for global and per-page styles.
# - Implement modern typography, consistent spacing, and subtle animations.
# - Ensure layouts are intuitive and visually appealing, following modern web design trends.

# Workflows & Development Environment:
# - Operating on macOS with zsh terminal.
# - Python virtual environment management (e.g., pipenv) may be used.
# - Development can occur locally, with future plans for Docker and Kubernetes-based production deployments.
# - Code should be structured to allow smooth transition from local development to cloud hosting.

# Tags & Documentation:
# - Use `task:` to denote what needs to be accomplished.
# - Use `background:` to provide context or rationale for a task.
# - Use `study:` to share references, comparisons, or examples for future implementation ideas.

# Future Considerations:
# - Incorporate testing and deployment tools within Imagi Oasis.
# - Expand API and model definition capabilities within the platform.
# - Leverage AI agents to enable dynamic feature generation, scalability, and enhanced customization options.