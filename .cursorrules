# .cursorrules

## Purpose
Defines rules for coding, design, and generation in **Imagi Oasis** to ensure consistency and best practices.

## Company Overview
**Imagi** is a natural language-to-code platform. Its product, **Imagi Oasis**, allows users to build full-stack web apps with AI-generated code.

---

## Core Directives
1. **Complete Files** – Generate self-contained files with necessary imports and dependencies.
2. **Best Practices** – Write clean, maintainable, and secure code for Python/Django and Vue.js.
3. **Testing** – Include tests for Django and Vue.js.
4. **Clear Naming & Comments** – Ensure code readability.

---

## Project Structure
- **Frontend**: `Imagi/frontend/VueJS/` (Vue.js)
- **Backend**: `Imagi/backend/django/` (Django)
- **User Projects**: `~/startups/oasis_projects/<user_id>/<project_name>/`
  - Standalone Django projects with templates, static files, views, and URL configurations.

---

## Apps Overview
- **Auth** – Manages user authentication.
- **Builder** – Core AI-powered app for web generation (Chat & Build Modes).
- **Home** – Landing pages and marketing content.
- **Payments** – Stripe integration for AI/API credit purchases.
- **Agents** – Handles AI workflows and GPT-4 integration.
- **ProjectManager** – Manages project lifecycle and file handling.

---

## Frontend (Vue.js)
- **API**: Use **Axios**.
- **State Management**: Use **Pinia**.
- **Styling**:
  - **Tailwind CSS** with `tailwind.config.js`.
  - No inline styles; use utility classes.
- **Design**:
  - Component-based, responsive, and accessible.

---

## Backend (Django)
- **API**: Use **Django REST Framework (DRF)** with `/api/v1/` versioning.
- **Authentication**: Use Django’s built-in system and DRF authentication.

---

## Design Principles
- Inspired by Stripe, Airbnb, Apple, Twilio, Meta, Google, Discord.
- Focus on minimalism, elegance, and responsiveness.
- Use modern typography, spacing, and animations.

---

## Development Environment
- **OS**: macOS (zsh).
- **Dependencies**:
  - **pipenv** for Python.
  - **Node.js/npm** for frontend.
- **Local Development**: Future **Docker & Kubernetes** deployment.

---

## Testing
- **Django**: Use `pytest` or built-in testing.
- **Vue.js**: Use **Jest** or **Cypress** for UI and component testing.

---

## Cursor Tags
- `task:` Assigns a specific task (e.g., `"task: Generate a Vue.js component"`).
- `study:` Provides references or background info.

