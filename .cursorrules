# .cursorrules

## Purpose
Defines rules for coding, design, and generation in **Imagi Oasis** to ensure consistency and best practices.

## Company Overview
**Imagi** is a natural language-to-code platform. Its product, **Imagi Oasis**, allows users to build full-stack web apps with AI-generated code.

---

## Core Directives
1. **Complete Files** – Generate self-contained files with necessary imports and dependencies.
2. **Best Practices** – Write clean, maintainable, and secure code for Python/Django and Vue.js.
3. **Testing** – Include tests for Django and Vue.js.
4. **Clear Naming & Comments** – Ensure code readability.
5. **Atomic Design** – Follow atomic design principles for Vue.js components.

---

## Project Structure
- **Frontend**: `Imagi/frontend/VueJS/` (Vue.js)
  - Each app follows atomic design principles:
    ```
    app/
    └── components/
        ├── atoms/           # Basic building blocks
        │   ├── buttons/     # Button components
        │   ├── inputs/      # Form inputs
        │   ├── text/        # Text elements
        │   └── icons/       # Icon components
        ├── molecules/       # Simple combinations
        │   ├── cards/       # Card components
        │   ├── forms/       # Form groups
        │   └── navigation/  # Nav elements
        ├── organisms/       # Complex combinations
        │   ├── sections/    # Page sections
        │   ├── grids/       # Grid layouts
        │   └── forms/       # Complete forms
        └── templates/       # Page-level layouts
            └── layout/      # Layout templates
    ```
- **Backend**: `Imagi/backend/django/` (Django)
- **User Projects**: `~/startups/oasis_projects/<user_id>/<project_name>/`
  - Standalone Django projects with templates, static files, views, and URL configurations.

---

## Apps Overview
- **Auth** – Manages user authentication.
- **Builder** – Core AI-powered app for web generation (Chat & Build Modes).
- **Home** – Landing pages and marketing content.
- **Payments** – Stripe integration for AI/API credit purchases.
- **Agents** – Handles AI workflows and GPT-4 integration.
- **ProjectManager** – Manages project lifecycle and file handling.

---

## Frontend (Vue.js)
- **API**: Use **Axios**.
- **State Management**: Use **Pinia**.
- **Styling**:
  - **Tailwind CSS** with `tailwind.config.js`.
  - No inline styles; use utility classes.
- **Design**:
  - Component-based, responsive, and accessible.

---

## Backend (Django)
- **API**: Use **Django REST Framework (DRF)** with `/api/v1/` versioning.
- **Authentication**: Use Django’s built-in system and DRF authentication.

---

## Component Architecture
### Atomic Design Principles
- **Atoms**: Basic building blocks (buttons, inputs, icons, text)
  - Self-contained
  - Highly reusable
  - No dependencies on other components
- **Molecules**: Simple combinations of atoms
  - Form fields, cards, menu items
  - Limited to 2-3 atoms
  - Clear single responsibility
- **Organisms**: Complex combinations of molecules
  - Forms, headers, feature grids
  - Business logic allowed
  - Complete functional units
- **Templates**: Page-level components
  - Layout components
  - Accept slots and props
  - Define page structure
- **Pages**: View components
  - Implement templates
  - Connect to store
  - Handle routing

### Component Guidelines
- Clear separation between atomic levels
- Components should be reusable
- Higher-level components compose lower-level ones
- Each category has clear responsibility
- Follow Vue.js composition API patterns

---

## Design Principles
- Inspired by Stripe, Airbnb, Apple, Twilio, Meta, Google, Discord
- Focus on minimalism, elegance, and responsiveness
- Use modern typography, spacing, and animations
- **UI/UX Standards**:
  - Clean, minimalist design
  - Responsive layouts
  - Accessible components (WCAG 2.1)
  - Dark/light mode support
- **Code Style**:
  - Python: Black formatter, 88 char line length
  - JavaScript: Prettier, 80 char line length
  - Clear comments and documentation
  - Type hints (Python) and TypeScript

---

## Development Environment
- **OS**: macOS (zsh).
- **Dependencies**:
  - **pipenv** for Python.
  - **Node.js/npm** for frontend.
- **Local Development**: Future **Docker & Kubernetes** deployment.

---

## Testing
- **Django**: Use `pytest` or built-in testing.
- **Vue.js**: Use **Jest** or **Cypress** for UI and component testing.

---

## Cursor Tags
- `task:` Assigns a specific task (e.g., `"task: Generate a Vue.js component"`).
- `study:` Provides references or background info.

