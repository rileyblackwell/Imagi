# .cursorrules

## Purpose
Defines rules for coding, design, and generation in **Imagi Oasis** to ensure consistency and best practices.

## Company Overview
- **Product**: Imagi Oasis - AI-powered web application generator
- **Mission**: Enable users to build full-stack web applications using natural language
- **Target Users**: Developers and technical users requiring rapid application development

---

## Tech Stack
### Frontend
- **Framework**: Vue.js 3 with Composition API
- **State Management**: Pinia
- **HTTP Client**: Axios
- **UI/Styling**: TailwindCSS
- **Testing**: Jest, Cypress
- **Build Tools**: Vite

### Backend
- **Framework**: Django 4.x
- **API**: Django REST Framework
- **Database**: PostgreSQL (Production), SQLite (Development)
- **Testing**: pytest
- **Authentication**: Django built-in + DRF auth
- **API Version**: `/api/v1/`

---

Each app module should be self-contained with:
- Components
- Routes
- Store
- Services
- Types
- Tests

---

## Backend Apps (Django)
- **auth**: Custom authentication and authorization
- **builder**: Core AI generation logic and prompts
- **home**: Landing pages and static content
- **payments**: Stripe integration for API credits
- **agents**: AI workflow management
- **project_manager**: Project lifecycle handling

---

## Development Environment
- **OS**: macOS (zsh)
- **Package Managers**:
  - Frontend: npm/yarn
  - Backend: pipenv
- **Required Tools**:
  - Node.js >= 16.x
  - Python >= 3.10
  - PostgreSQL >= 14
- **Editor Setup**:
  - VSCode/Cursor with provided settings
  - Tailwind CSS IntelliSense
  - Python and Vue.js extensions

---

## Code Architecture
### Atomic Design Principles (Vue.js)
1. **Atoms**: Basic building blocks (buttons, inputs, icons, text)
2. **Molecules**: Simple combinations of atoms (form fields, cards, menu items)
3. **Organisms**: Complex combinations of molecules (forms, headers, feature grids)
4. **Templates**: Page-level components and layouts
5. **Pages**: Specific instances of templates with logic and routing

**Guidelines:**
- Keep each component in its designated category (`atoms/`, `molecules/`, etc.).
- Maintain a clear separation of concerns—higher-level components compose lower-level components.
- Prefer the **Composition API** over the Options API for reusable logic.
- Use **TypeScript** where applicable for better type safety.
- **All Vue.js imports should use the `@` symbol to alias the `src` directory**.

### Django API Design
- Use **Django REST Framework (DRF)** for API endpoints.
- Follow RESTful API principles with `/api/v1/` versioning.
- Separate views, serializers, and models clearly within each app.
- Implement authentication via **DRF Token Auth** or OAuth2 in future updates.

---

## UI/UX Principles
- **Minimalist, Modern UI** inspired by Stripe, Airbnb, Apple, Twilio.
- **Responsive Layouts** using Tailwind utility classes.
- **Accessibility Compliance** (WCAG 2.1).
- **Dark/Light Mode Support**.

---

## Testing Strategy
### Frontend (Vue.js)
- **Unit Tests**: Use **Jest** for testing Vue components.
- **E2E Tests**: Use **Cypress** for end-to-end testing.

### Backend (Django)
- **Unit Tests**: Use `pytest` for testing models, views, and APIs.
- **Integration Tests**: Ensure API endpoints work as expected.

**Test Coverage Targets:**
- Authentication & Authorization: 90%+
- API Endpoints: 80%+
- UI Components: 75%+

---

## AI Assistant Instructions
- Use `task:` prefix for specific generation tasks.
- Use `study:` prefix for documentation/learning tasks.
- Generate **self-contained files** with necessary imports and dependencies.
- Include relevant **tests** with new features.
- Follow established naming conventions.

---

## Cursor Tags
- **`task:`** – Assigns a specific task (e.g., `"task: Generate a Vue.js component"`).
- **`study:`** – Provides references or background info.

---

## Deployment Considerations
- **Local Development**: SQLite, pipenv, Vite
- **Staging & Production**:
  - Database: **PostgreSQL**
  - API Deployment: **Django on Gunicorn/Uvicorn**
  - Frontend Deployment: **Vite build, hosted on CDN**
  - Future Enhancements: **Docker & Kubernetes for scaling**

---

## Final Notes
This **`.cursorrules`** file ensures **Imagi Oasis** follows a structured, maintainable, and scalable approach for AI-powered web app generation. Follow these rules to ensure consistency across frontend and backend development.
